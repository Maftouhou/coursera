Algular App concept
====================================

Simple initialize Angular Application 
_____________________________________
- ng-app : init application without controller
- ng-app="Name" : init application with controller
		meny controller can be used on the same application 

- ng-init and ng-repeat : initialize an element aimed to de repeated.
- ng-src : define a source of element
- ng-model="NameOfElement" : in the case of an input, used to link the element to report its content. 

--------------

- ng-controller : initialize (and create an istance of ) a controller to use in the DOM. meny controllers can be used for defferentes taskes. To define the element that should be used to include content from controller, we use the ng-controller directive to initialize this element in order to recieve content defined on that controller. 
variables inside that controller can be colled using the controller instance, if any, dot the variable name. 

---------------

GRANT Task runner 
---------------
- Grunt globbing patterns : 
  * : match any number of char except "/";
  ? : match a single char except "/";
  ** : match any number of char including "/";
  {} : take in count any of the elements separeted by comma, that much; 
  ! : if it doesn't mutch the pattern, exclude from consideration;

Build-in use-main package
------------------------------
enclose css links with the build css comments to create a one file .main.css
<!-- build:css   -->



Some Grunt methodes : 
----------------------------
- copy() : specify parameter "dist" that takes differentes parameters like : 
  - src : for the source (can take grunt globbing patterns)
  - dest : for the destination

- clear() : take parameter "build" to clean the source

- registerTask('build', ['tast1', '...', 'taskn']) : specify task running order 

Grunt-usemin : configure css and js tasks
  - Grunt-usemin workflow : useminPrepare=>concat=>cssmin=>uglify=>filerev=>usemin
  - filerev : force uncaches files (css and js) in order to suply the newest version of file, if any modification made. it provide an automatic generated code on the name of the file at any time the file is resived
  - filerev options : encode 'Utf8', algoritm 'md5', length '20';



Grunt Task Modules
---------------------------
- The JSHint : used to configure tasks for JS Files
Installation : npm install grunt-contrib-jshint --save-dev
- The JSHint Stylish : Installation : npm i jshint-stylish --save-dev
- The Time grunt : keep track of the time that a task take and generate a statistic at the end of the grunt running.  
installation : npm i grunt-time --s-d
- the jit grunt (just in time) : look at the node_module and import any modure required for the grunt running process.
installation : npm i jit-grunt --save-dev



Installing GRUNT 
----------------------------
GLOGAL INSTALLATION : npm i -g grunt-cli
LOCAL INSTALLATION : npm i grunt --save-dev






Technical word : 
===============================
- Static code analysis : 


